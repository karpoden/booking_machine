const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const API_URL = process.env.API_URL;

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
const subscribedAdmins = new Set();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  subscribedAdmins.add(chatId);
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìä –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'all_bookings' }],
      [{ text: 'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'today_bookings' }]
    ]
  };
  
  bot.sendMessage(chatId, 
    'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
    '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { reply_markup: keyboard }
  );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function getAllBookings() {
  try {
    const response = await axios.get(`${API_URL}/api/bookings`);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    return [];
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  if (data === 'all_bookings') {
    const bookings = await getAllBookings();
    
    if (bookings.length === 0) {
      bot.sendMessage(chatId, 'üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
    } else {
      let message = 'üìä –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
      bookings.forEach((booking, index) => {
        message += `${index + 1}. üçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\n`;
        message += `   üìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n`;
        message += `   üìû ${booking.customerPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   üë§ ${booking.customerName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
      });
      
      bot.sendMessage(chatId, message);
    }
  }
  
  if (data === 'today_bookings') {
    const today = new Date().toISOString().split('T')[0];
    const bookings = await getAllBookings();
    const todayBookings = bookings.filter(booking => booking.bookingDate === today);
    
    if (todayBookings.length === 0) {
      bot.sendMessage(chatId, 'üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
    } else {
      let message = 'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';
      todayBookings.forEach((booking, index) => {
        message += `${index + 1}. üçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\n`;
        message += `   üïê ${booking.bookingTime}\n`;
        message += `   üìû ${booking.customerPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   üë§ ${booking.customerName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
      });
      
      bot.sendMessage(chatId, message);
    }
  }
  
  if (data.startsWith('approve_')) {
    const bookingId = data.replace('approve_', '');
    bot.editMessageText(
      query.message.text + '\n\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û',
      { chat_id: chatId, message_id: query.message.message_id }
    );
  }
  
  if (data.startsWith('reject_')) {
    const bookingId = data.replace('reject_', '');
    bot.editMessageText(
      query.message.text + '\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û',
      { chat_id: chatId, message_id: query.message.message_id }
    );
  }
  
  bot.answerCallbackQuery(query.id);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
function sendBookingNotification(booking) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_${booking.id}` },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${booking.id}` }
      ]
    ]
  };
  
  const message = 
    `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n` +
    `üçΩ –°—Ç–æ–ª: ‚Ññ${booking.tableId}\n` +
    `üìÖ –î–∞—Ç–∞: ${booking.bookingDate}\n` +
    `üïê –í—Ä–µ–º—è: ${booking.bookingTime}\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.customerPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `üë§ –ò–º—è: ${booking.customerName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
  subscribedAdmins.forEach(adminId => {
    bot.sendMessage(adminId, message, { reply_markup: keyboard });
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
module.exports = { sendBookingNotification };

console.log('üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');