const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
require('dotenv').config();

const bot = new TelegramBot(process.env.ADMIN_BOT_TOKEN, { polling: true });
const API_URL = 'http://booking-backend-prod:3000';

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const app = express();
app.use(express.json());

app.post('/notify', (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', req.body);
  const { booking } = req.body;
  if (booking) {
    sendBookingNotification(booking);
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º');
  } else {
    console.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ');
  }
  res.json({ success: true });
});

app.listen(3002, () => {
  console.log('üîî HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3002');
});

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
const subscribedAdmins = new Set();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
const userStates = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  subscribedAdmins.add(chatId);
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìä –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'all_bookings' }],
      [{ text: 'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'today_bookings' }],
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'add_booking' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'cancel_booking' }]
    ]
  };
  
  bot.sendMessage(chatId, 
    'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
    '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/add - –¥–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n' +
    '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { reply_markup: keyboard }
  );
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
bot.onText(/\/add/, (msg) => {
  const chatId = msg.chat.id;
  showTableButtons(chatId, 'add_booking');
});

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  showTableButtons(chatId, 'cancel_booking');
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–æ–ª–æ–≤
async function showTableButtons(chatId, action) {
  const bookings = await getAllBookings();
  let availableTables = [];
  
  if (action === 'add_booking') {
    // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
    const allTables = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    
    for (const tableId of allTables) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
      let hasAvailableTime = false;
      for (let hour = Math.max(12, now.getHours()); hour < 24; hour++) {
        for (let minute of [0, 30]) {
          if (hour === now.getHours() && minute <= now.getMinutes()) continue;
          
          const timeStr = `${hour}:${minute.toString().padStart(2, '0')}`;
          const isBooked = bookings.some(b => 
            b.tableId === tableId && 
            b.bookingDate === today &&
            timesOverlap(b.bookingTime, b.duration || 2, timeStr, 2)
          );
          
          if (!isBooked) {
            hasAvailableTime = true;
            break;
          }
        }
        if (hasAvailableTime) break;
      }
      
      if (hasAvailableTime) {
        availableTables.push(tableId);
      }
    }
  } else if (action === 'cancel_booking') {
    // –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç—ã–µ —Å—Ç–æ–ª—ã
    availableTables = [...new Set(bookings.map(b => b.tableId))];
  }
  
  if (availableTables.length === 0) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.', { reply_markup: keyboard });
    return;
  }
  
  const buttons = [];
  for (let i = 0; i < availableTables.length; i += 3) {
    const row = availableTables.slice(i, i + 3).map(tableId => ({
      text: `–°—Ç–æ–ª ${tableId}`,
      callback_data: `${action}_table_${tableId}`
    }));
    buttons.push(row);
  }
  
  const keyboard = { inline_keyboard: buttons };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª:', { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –¥–∞—Ç
async function showDateButtons(chatId, action, tableId) {
  const bookings = await getAllBookings();
  const today = new Date();
  const dates = [];
  
  if (action === 'cancel_booking') {
    // –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∞
    const tableBookings = bookings.filter(b => b.tableId === parseInt(tableId));
    const bookedDates = [...new Set(tableBookings.map(b => b.bookingDate))];
    
    bookedDates.forEach(dateStr => {
      const date = new Date(dateStr);
      const dayName = dateStr === today.toISOString().split('T')[0] ? '–°–µ–≥–æ–¥–Ω—è' : 
                     dateStr === new Date(today.getTime() + 24*60*60*1000).toISOString().split('T')[0] ? '–ó–∞–≤—Ç—Ä–∞' :
                     date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric', month: 'short' });
      dates.push({ text: dayName, callback_data: `${action}_date_${tableId}_${dateStr}` });
    });
  } else {
    // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dateStr = date.toISOString().split('T')[0];
      const dayName = i === 0 ? '–°–µ–≥–æ–¥–Ω—è' : i === 1 ? '–ó–∞–≤—Ç—Ä–∞' : date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric', month: 'short' });
      dates.push({ text: dayName, callback_data: `${action}_date_${tableId}_${dateStr}` });
    }
  }
  
  if (dates.length === 0) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∞.', { reply_markup: keyboard });
    return;
  }
  
  const buttons = [];
  for (let i = 0; i < dates.length; i += 2) {
    buttons.push(dates.slice(i, i + 2));
  }
  
  const keyboard = { inline_keyboard: buttons };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:', { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
async function showTimeButtons(chatId, action, tableId, date) {
  const bookings = await getAllBookings();
  let times = [];
  
  if (action === 'cancel_booking') {
    // –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è
    const tableBookings = bookings.filter(b => 
      b.tableId === parseInt(tableId) && b.bookingDate === date
    );
    
    tableBookings.forEach(booking => {
      times.push({
        text: booking.bookingTime,
        callback_data: `${action}_time_${tableId}_${date}_${booking.bookingTime}`
      });
    });
  } else {
    // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const currentHour = now.getHours();
    const currentMinute = now.getMinutes();
    
    for (let hour = 12; hour < 24; hour++) {
      for (let minute of [0, 30]) {
        const timeStr = `${hour}:${minute.toString().padStart(2, '0')}`;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
        if (date === today) {
          if (hour < currentHour || (hour === currentHour && minute <= currentMinute)) {
            continue;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –≤—Ä–µ–º—è
        const isBooked = bookings.some(b => 
          b.tableId === parseInt(tableId) && 
          b.bookingDate === date &&
          timesOverlap(b.bookingTime, b.duration || 2, timeStr, 2)
        );
        
        if (!isBooked) {
          times.push({
            text: timeStr,
            callback_data: `${action}_time_${tableId}_${date}_${timeStr}`
          });
        }
      }
    }
  }
  
  if (times.length === 0) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∞.', { reply_markup: keyboard });
    return;
  }
  
  const buttons = [];
  for (let i = 0; i < times.length; i += 4) {
    buttons.push(times.slice(i, i + 4));
  }
  
  const keyboard = { inline_keyboard: buttons };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:', { reply_markup: keyboard });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function getAllBookings() {
  try {
    const response = await axios.get(`${API_URL}/api/bookings`);
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function timesOverlap(time1, duration1, time2, duration2) {
  const [h1, m1] = time1.split(':').map(Number);
  const [h2, m2] = time2.split(':').map(Number);
  
  const start1 = h1 * 60 + m1;
  const end1 = start1 + duration1 * 60;
  const start2 = h2 * 60 + m2;
  const end2 = start2 + duration2 * 60;
  
  return start1 < end2 && start2 < end1;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  if (data === 'all_bookings') {
    const bookings = await getAllBookings();
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    
    let message;
    if (bookings.length === 0) {
      message = 'üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.';
    } else {
      message = 'üìä –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
      bookings.forEach((booking, index) => {
        message += `${index + 1}. üçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\n`;
        message += `   üìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n`;
        message += `   üìû ${booking.customerPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   üë§ ${booking.customerName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
      });
    }
    
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard
    });
  }
  
  if (data === 'today_bookings') {
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    const bookings = await getAllBookings();
    const todayBookings = bookings.filter(booking => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
      const bookingDateTime = new Date(`${booking.bookingDate}T${booking.bookingTime}`);
      const twoHoursAgo = new Date(now.getTime() - 2 * 60 * 60 * 1000);
      if (bookingDateTime < twoHoursAgo) return false;
      
      if (booking.bookingDate === today) return true;
      if (booking.bookingDate === tomorrowStr) {
        const hour = parseInt(booking.bookingTime.split(':')[0]);
        return hour >= 0 && hour < 12; // 00:00-11:59 –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
      }
      return false;
    });
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    
    let message;
    if (todayBookings.length === 0) {
      message = 'üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.';
    } else {
      message = 'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n';
      todayBookings.forEach((booking, index) => {
        const isNextDay = booking.bookingDate === tomorrowStr;
        message += `${index + 1}. üçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\n`;
        message += `   üïê ${booking.bookingTime}${isNextDay ? ' (–∑–∞–≤—Ç—Ä–∞)' : ''}\n`;
        message += `   üìû ${booking.customerPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
        message += `   üë§ ${booking.customerName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
      });
    }
    
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard
    });
  }
  
  if (data === 'add_booking') {
    showTableButtons(chatId, 'add_booking');
  }
  
  if (data === 'cancel_booking') {
    showTableButtons(chatId, 'cancel_booking');
  }
  
  if (data === 'main_menu') {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìä –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'all_bookings' }],
        [{ text: 'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'today_bookings' }],
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'add_booking' }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'cancel_booking' }]
      ]
    };
    
    bot.editMessageText(
      'üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { chat_id: chatId, message_id: query.message.message_id, reply_markup: keyboard }
    );
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  if (data.startsWith('add_booking_table_')) {
    const tableId = data.replace('add_booking_table_', '');
    showDateButtons(chatId, 'add_booking', tableId);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  if (data.startsWith('add_booking_date_')) {
    const parts = data.replace('add_booking_date_', '').split('_');
    const tableId = parts[0];
    const date = parts[1];
    showTimeButtons(chatId, 'add_booking', tableId, date);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  if (data.startsWith('add_booking_time_')) {
    const parts = data.replace('add_booking_time_', '').split('_');
    const tableId = parts[0];
    const date = parts[1];
    const time = parts[2];
    
    userStates.set(chatId, { action: 'add_booking', tableId, date, time, step: 'name' });
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:');
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
  if (data.startsWith('cancel_booking_table_')) {
    const tableId = data.replace('cancel_booking_table_', '');
    showDateButtons(chatId, 'cancel_booking', tableId);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã
  if (data.startsWith('cancel_booking_date_')) {
    const parts = data.replace('cancel_booking_date_', '').split('_');
    const tableId = parts[0];
    const date = parts[1];
    showTimeButtons(chatId, 'cancel_booking', tableId, date);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
  if (data.startsWith('cancel_booking_time_')) {
    const parts = data.replace('cancel_booking_time_', '').split('_');
    const tableId = parseInt(parts[0]);
    const date = parts[1];
    const time = parts[2];
    
    try {
      const response = await axios.delete(`${API_URL}/api/book/${tableId}?date=${date}&time=${time}`);
      const booking = response.data.booking;
      
      if (booking && booking.telegramId) {
        try {
          await axios.post('http://booking-bot-user-prod:3001/notify', {
            userId: booking.telegramId,
            message: `‚ùå –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\nüçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\nüìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.`
          });
        } catch (notifyError) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
        }
      }
      
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      };
      
      bot.sendMessage(chatId, `‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ:\n–°—Ç–æ–ª ‚Ññ${tableId}\n${date} –≤ ${time}`, { reply_markup: keyboard });
    } catch (error) {
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      };
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}`, { reply_markup: keyboard });
    }
  }
  
  if (data.startsWith('approve_')) {
    const bookingId = data.replace('approve_', '');
    
    try {
      const bookings = await getAllBookings();
      const booking = bookings.find(b => b.id == bookingId);
      
      if (booking && booking.telegramId) {
        await axios.post('http://booking-bot-user-prod:3001/notify', {
          userId: booking.telegramId,
          message: `‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\nüçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\nüìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n\n–ñ–¥–µ–º –≤–∞—Å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ! üéâ`
        });
      }
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    bot.editMessageText(
      query.message.text + '\n\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û',
      { chat_id: chatId, message_id: query.message.message_id }
    );
  }
  
  if (data.startsWith('change_')) {
    const bookingId = data.replace('change_', '');
    userStates.set(chatId, { action: 'change_table', bookingId, messageId: query.message.message_id });
    
    const keyboard = {
      inline_keyboard: [
        [{ text: '–°—Ç–æ–ª 1', callback_data: `change_table_${bookingId}_1` }, { text: '–°—Ç–æ–ª 2', callback_data: `change_table_${bookingId}_2` }, { text: '–°—Ç–æ–ª 3', callback_data: `change_table_${bookingId}_3` }],
        [{ text: '–°—Ç–æ–ª 4', callback_data: `change_table_${bookingId}_4` }, { text: '–°—Ç–æ–ª 5', callback_data: `change_table_${bookingId}_5` }, { text: '–°—Ç–æ–ª 6', callback_data: `change_table_${bookingId}_6` }],
        [{ text: '–°—Ç–æ–ª 7', callback_data: `change_table_${bookingId}_7` }, { text: '–°—Ç–æ–ª 8', callback_data: `change_table_${bookingId}_8` }, { text: '–°—Ç–æ–ª 9', callback_data: `change_table_${bookingId}_9` }]
      ]
    };
    
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–æ–ª:', { reply_markup: keyboard });
  }
  
  if (data.startsWith('change_table_')) {
    const parts = data.replace('change_table_', '').split('_');
    const bookingId = parts[0];
    const newTableId = parseInt(parts[1]);
    
    try {
      const bookings = await getAllBookings();
      const booking = bookings.find(b => b.id == bookingId);
      
      if (booking) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –Ω–æ–≤—ã–π —Å—Ç–æ–ª
        const conflictBooking = bookings.find(b => 
          b.id != bookingId && 
          b.tableId === newTableId && 
          b.bookingDate === booking.bookingDate &&
          timesOverlap(b.bookingTime, b.duration || 2, booking.bookingTime, booking.duration || 2)
        );
        
        if (conflictBooking) {
          bot.sendMessage(chatId, `‚ùå –°—Ç–æ–ª ‚Ññ${newTableId} —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è`);
          userStates.delete(chatId);
          return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await axios.put(`${API_URL}/api/book/${bookingId}`, {
          tableId: newTableId
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (booking.telegramId) {
          await axios.post('http://booking-bot-user-prod:3001/notify', {
            userId: booking.telegramId,
            message: `üîÑ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\nüçΩ –ù–æ–≤—ã–π —Å—Ç–æ–ª: ‚Ññ${newTableId}\nüìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n\n–ñ–¥–µ–º –≤–∞—Å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ! üéâ`
          });
        }
        
        const state = userStates.get(chatId);
        if (state && state.messageId) {
          bot.editMessageText(
            query.message.text.replace(/–°—Ç–æ–ª: ‚Ññ\d+/, `–°—Ç–æ–ª: ‚Ññ${newTableId}`) + '\n\nüîÑ –°–¢–û–õ –ò–ó–ú–ï–ù–ï–ù',
            { chat_id: chatId, message_id: state.messageId }
          );
        }
        
        bot.sendMessage(chatId, `‚úÖ –°—Ç–æ–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ‚Ññ${newTableId}`);
      }
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–∞');
    }
    
    userStates.delete(chatId);
  }
  
  if (data.startsWith('reject_')) {
    const bookingId = data.replace('reject_', '');
    
    try {
      const bookings = await getAllBookings();
      const booking = bookings.find(b => b.id == bookingId);
      
      if (booking) {
        // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await axios.delete(`${API_URL}/api/book/${booking.tableId}?date=${booking.bookingDate}&time=${booking.bookingTime}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (booking.telegramId) {
          await axios.post('http://booking-bot-user-prod:3001/notify', {
            userId: booking.telegramId,
            message: `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\nüçΩ –°—Ç–æ–ª ‚Ññ${booking.tableId}\nüìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.`
          });
        }
      }
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    bot.editMessageText(
      query.message.text + '\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û',
      { chat_id: chatId, message_id: query.message.message_id }
    );
  }
  
  bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (!userStates.has(chatId) || text.startsWith('/')) return;
  
  const state = userStates.get(chatId);
  
  if (state.action === 'add_booking') {
    if (state.step === 'name') {
      state.name = text;
      state.step = 'phone';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:');
    } else if (state.step === 'phone') {
      state.phone = text;
      
      try {
        await axios.post(`${API_URL}/api/book`, {
          table_id: parseInt(state.tableId),
          booking_date: state.date,
          booking_time: state.time,
          duration: 2,
          customer_name: state.name,
          customer_phone: state.phone
        });
        
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        };
        
        bot.sendMessage(chatId, `‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n–°—Ç–æ–ª ‚Ññ${state.tableId}\n${state.date} –≤ ${state.time}\n${state.name} (${state.phone})`, { reply_markup: keyboard });
      } catch (error) {
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        };
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'}`, { reply_markup: keyboard });
      }
      
      userStates.delete(chatId);
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
function sendBookingNotification(booking) {
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_${booking.id}` }],
      [{ text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ª', callback_data: `change_${booking.id}` }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `reject_${booking.id}` }]
    ]
  };
  
  const message = 
    `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n` +
    `üçΩ –°—Ç–æ–ª: ‚Ññ${booking.tableId}\n` +
    `üìÖ –î–∞—Ç–∞: ${booking.bookingDate}\n` +
    `üïê –í—Ä–µ–º—è: ${booking.bookingTime}\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.customerPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `üë§ –ò–º—è: ${booking.customerName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
  subscribedAdmins.forEach(adminId => {
    bot.sendMessage(adminId, message, { reply_markup: keyboard });
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
module.exports = { sendBookingNotification };

console.log('üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');