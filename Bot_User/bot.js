const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const WEBAPP_URL = process.env.WEBAPP_URL;
const API_URL = process.env.API_URL;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userBookings = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª', web_app: { url: WEBAPP_URL } }],
      [{ text: 'üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'my_bookings' }]
    ]
  };
  
  bot.sendMessage(chatId, 
    'üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤!\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
bot.on('web_app_data', async (msg) => {
  const chatId = msg.chat.id;
  const data = JSON.parse(msg.web_app.data);
  
  if (data.action === 'book_table') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const bookingId = `${chatId}_${Date.now()}`;
    userBookings.set(bookingId, {
      userId: chatId,
      userName: msg.from.first_name,
      userUsername: msg.from.username,
      ...data,
      status: 'pending',
      bookingId
    });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –±–æ—Ç–æ–º
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userKeyboard = {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: `cancel_${bookingId}` }]
      ]
    };
    
    bot.sendMessage(chatId, 
      `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n` +
      `üçΩ –°—Ç–æ–ª: ‚Ññ${data.table}\n` +
      `üìÖ –î–∞—Ç–∞: ${data.date}\n` +
      `üïê –í—Ä–µ–º—è: ${data.time}\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...`,
      { reply_markup: userKeyboard }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  if (data.startsWith('approve_')) {
    const bookingId = data.replace('approve_', '');
    const booking = userBookings.get(bookingId);
    
    if (booking) {
      booking.status = 'approved';
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.sendMessage(booking.userId, 
        `‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n` +
        `üçΩ –°—Ç–æ–ª: ‚Ññ${booking.table}\n` +
        `üìÖ –î–∞—Ç–∞: ${booking.date}\n` +
        `üïê –í—Ä–µ–º—è: ${booking.time}\n\n` +
        `–ñ–¥–µ–º –≤–∞—Å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ! üéâ`
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      bot.editMessageText(
        query.message.text + '\n\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û',
        { chat_id: chatId, message_id: query.message.message_id }
      );
    }
  }
  
  if (data.startsWith('reject_')) {
    const bookingId = data.replace('reject_', '');
    const booking = userBookings.get(bookingId);
    
    if (booking) {
      booking.status = 'rejected';
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.sendMessage(booking.userId, 
        `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n` +
        `üçΩ –°—Ç–æ–ª: ‚Ññ${booking.table}\n` +
        `üìÖ –î–∞—Ç–∞: ${booking.date}\n` +
        `üïê –í—Ä–µ–º—è: ${booking.time}\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.`
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      bot.editMessageText(
        query.message.text + '\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù–û',
        { chat_id: chatId, message_id: query.message.message_id }
      );
    }
  }
  
  if (data.startsWith('cancel_')) {
    const bookingId = data.replace('cancel_', '');
    const booking = userBookings.get(bookingId);
    
    if (booking && booking.userId === chatId) {
      userBookings.delete(bookingId);
      
      bot.sendMessage(chatId, '‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
      bot.sendMessage(ADMIN_CHAT_ID, 
        `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${booking.userName} –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞ ‚Ññ${booking.table} –Ω–∞ ${booking.date} ${booking.time}`
      );
    }
  }
  
  if (data === 'my_bookings') {
    const userActiveBookings = Array.from(userBookings.values())
      .filter(booking => booking.userId === chatId && booking.status !== 'rejected');
    
    if (userActiveBookings.length === 0) {
      bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
    } else {
      let message = 'üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
      userActiveBookings.forEach((booking, index) => {
        const statusEmoji = booking.status === 'approved' ? '‚úÖ' : '‚è≥';
        const statusText = booking.status === 'approved' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
        
        message += `${index + 1}. ${statusEmoji} –°—Ç–æ–ª ‚Ññ${booking.table}\n`;
        message += `   üìÖ ${booking.date} –≤ ${booking.time}\n`;
        message += `   üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n\n`;
      });
      
      bot.sendMessage(chatId, message);
    }
  }
  
  bot.answerCallbackQuery(query.id);
});

console.log('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');