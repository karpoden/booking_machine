const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
require('dotenv').config();

const bot = new TelegramBot(process.env.USER_BOT_TOKEN, { polling: true });
const WEBAPP_URL = process.env.WEBAPP_URL || 'https://bookingminiapp.ru';
const API_URL = 'http://backend:3000';

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const app = express();
app.use(express.json());

app.post('/notify', (req, res) => {
  const { userId, message } = req.body;
  bot.sendMessage(userId, message);
  res.json({ success: true });
});

app.listen(3001, () => {
  console.log('üîî HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª', web_app: { url: WEBAPP_URL } }],
      [{ text: 'üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'my_bookings' }]
    ]
  };
  
  bot.sendMessage(chatId, 
    'üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤!\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
bot.on('web_app_data', async (msg) => {
  const chatId = msg.chat.id;
  const data = JSON.parse(msg.web_app.data);
  
  if (data.action === 'book_table') {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    
    bot.sendMessage(chatId, 
      `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n` +
      `üçΩ –°—Ç–æ–ª: ‚Ññ${data.table}\n` +
      `üìÖ –î–∞—Ç–∞: ${data.date}\n` +
      `üïê –í—Ä–µ–º—è: ${data.time}\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...`,
      { reply_markup: keyboard }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  if (data === 'main_menu') {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª', web_app: { url: WEBAPP_URL } }],
        [{ text: 'üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'my_bookings' }]
      ]
    };
    
    bot.sendMessage(chatId, 
      'üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤!\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
      { reply_markup: keyboard }
    );
  }
  
  if (data === 'my_bookings') {
    try {
      const response = await axios.get(`${API_URL}/api/user-bookings/${chatId}`);
      const bookings = response.data;
      
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      };
      
      if (bookings.length === 0) {
        bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.', { reply_markup: keyboard });
      } else {
        let message = 'üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
        bookings.forEach((booking, index) => {
          message += `${index + 1}. ‚úÖ –°—Ç–æ–ª ‚Ññ${booking.tableId}\n`;
          message += `   üìÖ ${booking.bookingDate} –≤ ${booking.bookingTime}\n`;
          message += `   ‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${booking.duration} —á\n`;
          if (booking.customerName) {
            message += `   üë§ ${booking.customerName}\n`;
          }
          message += `\n`;
        });
        
        bot.sendMessage(chatId, message, { reply_markup: keyboard });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
  
  bot.answerCallbackQuery(query.id);
});

console.log('ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...');